#!/usr/bin/env ruby
require "fileutils"
require "erb"
from = ARGV.shift
to = ARGV.shift
if from.nil? || to.nil?
  puts "Usage: #{$0} <from> <to>"
  exit 1
end

def invader_for(type)
  prefix, ext, escape = case type
  when "tf"; ["//invade", ".tf", "//"]
  when "sh"; ["#invade", ".sh", "#"]
  else raise "Unknown type: #{type}"
  end
  invade_re = %r{#{prefix}\b(.+?)$}
  escape_re = %r{(?<=#{escape})(.*)\\\n.*#{escape}}

  # load invader files
  invaders = {}
  Dir.glob("invader/**/*#{ext}").each do |path|
    name = File.basename(path, ext).sub(/^invader\//, "")
    invaders[name] = File.read(path)
  end

  invade = -> src do
    # 行末エスケープを処理
    src = src.gsub(escape_re){ $1 }
    dst = src.gsub(invade_re) do |m|
      # get indent
      _, name, *args = m.split /\s+/
      hash = args.reduce({}) do |h, arg|
        k, v = arg.split("=")
        h[k] = v
        h
      end
      ERB.new(invaders[name]).result_with_hash hash
    end
    dst == src ? dst : invade[dst]
  end
end

invade_tf = invader_for("tf")
invade_sh = invader_for("sh")

Dir.glob("#{from}/**/*.*").each do |path|
  path_to = path.sub(from, to)
  dirname = File.dirname(path_to)
  ext = File.extname(path)
  FileUtils.mkdir_p(dirname)
  src = File.read(path)
  dst = case ext
  when ".tf"; invade_sh[invade_tf[src]]
  when ".sh"; invade_sh[src]
  else src
  end
  File.open(path_to, "w") do |f|
    f.write(dst)
  end
end
